// Code generated by counterfeiter. DO NOT EDIT.
package ptfakes

import (
	"net/http"
	"sync"

	"github.com/xchapter7x/terraform-provider-pivotaltracker/pkg/pt"
)

type FakeAccountMemberCaller struct {
	DeleteAccountMemberStub        func(int, int) (*http.Response, error)
	deleteAccountMemberMutex       sync.RWMutex
	deleteAccountMemberArgsForCall []struct {
		arg1 int
		arg2 int
	}
	deleteAccountMemberReturns struct {
		result1 *http.Response
		result2 error
	}
	deleteAccountMemberReturnsOnCall map[int]struct {
		result1 *http.Response
		result2 error
	}
	GetAccountMemberStub        func(int, int) (*pt.AccountMember, *http.Response, error)
	getAccountMemberMutex       sync.RWMutex
	getAccountMemberArgsForCall []struct {
		arg1 int
		arg2 int
	}
	getAccountMemberReturns struct {
		result1 *pt.AccountMember
		result2 *http.Response
		result3 error
	}
	getAccountMemberReturnsOnCall map[int]struct {
		result1 *pt.AccountMember
		result2 *http.Response
		result3 error
	}
	ListAccountMembersStub        func(int) ([]pt.AccountMember, *http.Response, error)
	listAccountMembersMutex       sync.RWMutex
	listAccountMembersArgsForCall []struct {
		arg1 int
	}
	listAccountMembersReturns struct {
		result1 []pt.AccountMember
		result2 *http.Response
		result3 error
	}
	listAccountMembersReturnsOnCall map[int]struct {
		result1 []pt.AccountMember
		result2 *http.Response
		result3 error
	}
	NewAccountMemberStub        func(int, pt.AccountMemberRequest) (*pt.AccountMember, *http.Response, error)
	newAccountMemberMutex       sync.RWMutex
	newAccountMemberArgsForCall []struct {
		arg1 int
		arg2 pt.AccountMemberRequest
	}
	newAccountMemberReturns struct {
		result1 *pt.AccountMember
		result2 *http.Response
		result3 error
	}
	newAccountMemberReturnsOnCall map[int]struct {
		result1 *pt.AccountMember
		result2 *http.Response
		result3 error
	}
	UpdateAccountMemberStub        func(int, int, pt.AccountMemberRequest) (*pt.AccountMember, *http.Response, error)
	updateAccountMemberMutex       sync.RWMutex
	updateAccountMemberArgsForCall []struct {
		arg1 int
		arg2 int
		arg3 pt.AccountMemberRequest
	}
	updateAccountMemberReturns struct {
		result1 *pt.AccountMember
		result2 *http.Response
		result3 error
	}
	updateAccountMemberReturnsOnCall map[int]struct {
		result1 *pt.AccountMember
		result2 *http.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAccountMemberCaller) DeleteAccountMember(arg1 int, arg2 int) (*http.Response, error) {
	fake.deleteAccountMemberMutex.Lock()
	ret, specificReturn := fake.deleteAccountMemberReturnsOnCall[len(fake.deleteAccountMemberArgsForCall)]
	fake.deleteAccountMemberArgsForCall = append(fake.deleteAccountMemberArgsForCall, struct {
		arg1 int
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("DeleteAccountMember", []interface{}{arg1, arg2})
	fake.deleteAccountMemberMutex.Unlock()
	if fake.DeleteAccountMemberStub != nil {
		return fake.DeleteAccountMemberStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAccountMemberReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAccountMemberCaller) DeleteAccountMemberCallCount() int {
	fake.deleteAccountMemberMutex.RLock()
	defer fake.deleteAccountMemberMutex.RUnlock()
	return len(fake.deleteAccountMemberArgsForCall)
}

func (fake *FakeAccountMemberCaller) DeleteAccountMemberCalls(stub func(int, int) (*http.Response, error)) {
	fake.deleteAccountMemberMutex.Lock()
	defer fake.deleteAccountMemberMutex.Unlock()
	fake.DeleteAccountMemberStub = stub
}

func (fake *FakeAccountMemberCaller) DeleteAccountMemberArgsForCall(i int) (int, int) {
	fake.deleteAccountMemberMutex.RLock()
	defer fake.deleteAccountMemberMutex.RUnlock()
	argsForCall := fake.deleteAccountMemberArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAccountMemberCaller) DeleteAccountMemberReturns(result1 *http.Response, result2 error) {
	fake.deleteAccountMemberMutex.Lock()
	defer fake.deleteAccountMemberMutex.Unlock()
	fake.DeleteAccountMemberStub = nil
	fake.deleteAccountMemberReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountMemberCaller) DeleteAccountMemberReturnsOnCall(i int, result1 *http.Response, result2 error) {
	fake.deleteAccountMemberMutex.Lock()
	defer fake.deleteAccountMemberMutex.Unlock()
	fake.DeleteAccountMemberStub = nil
	if fake.deleteAccountMemberReturnsOnCall == nil {
		fake.deleteAccountMemberReturnsOnCall = make(map[int]struct {
			result1 *http.Response
			result2 error
		})
	}
	fake.deleteAccountMemberReturnsOnCall[i] = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountMemberCaller) GetAccountMember(arg1 int, arg2 int) (*pt.AccountMember, *http.Response, error) {
	fake.getAccountMemberMutex.Lock()
	ret, specificReturn := fake.getAccountMemberReturnsOnCall[len(fake.getAccountMemberArgsForCall)]
	fake.getAccountMemberArgsForCall = append(fake.getAccountMemberArgsForCall, struct {
		arg1 int
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("GetAccountMember", []interface{}{arg1, arg2})
	fake.getAccountMemberMutex.Unlock()
	if fake.GetAccountMemberStub != nil {
		return fake.GetAccountMemberStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getAccountMemberReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAccountMemberCaller) GetAccountMemberCallCount() int {
	fake.getAccountMemberMutex.RLock()
	defer fake.getAccountMemberMutex.RUnlock()
	return len(fake.getAccountMemberArgsForCall)
}

func (fake *FakeAccountMemberCaller) GetAccountMemberCalls(stub func(int, int) (*pt.AccountMember, *http.Response, error)) {
	fake.getAccountMemberMutex.Lock()
	defer fake.getAccountMemberMutex.Unlock()
	fake.GetAccountMemberStub = stub
}

func (fake *FakeAccountMemberCaller) GetAccountMemberArgsForCall(i int) (int, int) {
	fake.getAccountMemberMutex.RLock()
	defer fake.getAccountMemberMutex.RUnlock()
	argsForCall := fake.getAccountMemberArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAccountMemberCaller) GetAccountMemberReturns(result1 *pt.AccountMember, result2 *http.Response, result3 error) {
	fake.getAccountMemberMutex.Lock()
	defer fake.getAccountMemberMutex.Unlock()
	fake.GetAccountMemberStub = nil
	fake.getAccountMemberReturns = struct {
		result1 *pt.AccountMember
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAccountMemberCaller) GetAccountMemberReturnsOnCall(i int, result1 *pt.AccountMember, result2 *http.Response, result3 error) {
	fake.getAccountMemberMutex.Lock()
	defer fake.getAccountMemberMutex.Unlock()
	fake.GetAccountMemberStub = nil
	if fake.getAccountMemberReturnsOnCall == nil {
		fake.getAccountMemberReturnsOnCall = make(map[int]struct {
			result1 *pt.AccountMember
			result2 *http.Response
			result3 error
		})
	}
	fake.getAccountMemberReturnsOnCall[i] = struct {
		result1 *pt.AccountMember
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAccountMemberCaller) ListAccountMembers(arg1 int) ([]pt.AccountMember, *http.Response, error) {
	fake.listAccountMembersMutex.Lock()
	ret, specificReturn := fake.listAccountMembersReturnsOnCall[len(fake.listAccountMembersArgsForCall)]
	fake.listAccountMembersArgsForCall = append(fake.listAccountMembersArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("ListAccountMembers", []interface{}{arg1})
	fake.listAccountMembersMutex.Unlock()
	if fake.ListAccountMembersStub != nil {
		return fake.ListAccountMembersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.listAccountMembersReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAccountMemberCaller) ListAccountMembersCallCount() int {
	fake.listAccountMembersMutex.RLock()
	defer fake.listAccountMembersMutex.RUnlock()
	return len(fake.listAccountMembersArgsForCall)
}

func (fake *FakeAccountMemberCaller) ListAccountMembersCalls(stub func(int) ([]pt.AccountMember, *http.Response, error)) {
	fake.listAccountMembersMutex.Lock()
	defer fake.listAccountMembersMutex.Unlock()
	fake.ListAccountMembersStub = stub
}

func (fake *FakeAccountMemberCaller) ListAccountMembersArgsForCall(i int) int {
	fake.listAccountMembersMutex.RLock()
	defer fake.listAccountMembersMutex.RUnlock()
	argsForCall := fake.listAccountMembersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAccountMemberCaller) ListAccountMembersReturns(result1 []pt.AccountMember, result2 *http.Response, result3 error) {
	fake.listAccountMembersMutex.Lock()
	defer fake.listAccountMembersMutex.Unlock()
	fake.ListAccountMembersStub = nil
	fake.listAccountMembersReturns = struct {
		result1 []pt.AccountMember
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAccountMemberCaller) ListAccountMembersReturnsOnCall(i int, result1 []pt.AccountMember, result2 *http.Response, result3 error) {
	fake.listAccountMembersMutex.Lock()
	defer fake.listAccountMembersMutex.Unlock()
	fake.ListAccountMembersStub = nil
	if fake.listAccountMembersReturnsOnCall == nil {
		fake.listAccountMembersReturnsOnCall = make(map[int]struct {
			result1 []pt.AccountMember
			result2 *http.Response
			result3 error
		})
	}
	fake.listAccountMembersReturnsOnCall[i] = struct {
		result1 []pt.AccountMember
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAccountMemberCaller) NewAccountMember(arg1 int, arg2 pt.AccountMemberRequest) (*pt.AccountMember, *http.Response, error) {
	fake.newAccountMemberMutex.Lock()
	ret, specificReturn := fake.newAccountMemberReturnsOnCall[len(fake.newAccountMemberArgsForCall)]
	fake.newAccountMemberArgsForCall = append(fake.newAccountMemberArgsForCall, struct {
		arg1 int
		arg2 pt.AccountMemberRequest
	}{arg1, arg2})
	fake.recordInvocation("NewAccountMember", []interface{}{arg1, arg2})
	fake.newAccountMemberMutex.Unlock()
	if fake.NewAccountMemberStub != nil {
		return fake.NewAccountMemberStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.newAccountMemberReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAccountMemberCaller) NewAccountMemberCallCount() int {
	fake.newAccountMemberMutex.RLock()
	defer fake.newAccountMemberMutex.RUnlock()
	return len(fake.newAccountMemberArgsForCall)
}

func (fake *FakeAccountMemberCaller) NewAccountMemberCalls(stub func(int, pt.AccountMemberRequest) (*pt.AccountMember, *http.Response, error)) {
	fake.newAccountMemberMutex.Lock()
	defer fake.newAccountMemberMutex.Unlock()
	fake.NewAccountMemberStub = stub
}

func (fake *FakeAccountMemberCaller) NewAccountMemberArgsForCall(i int) (int, pt.AccountMemberRequest) {
	fake.newAccountMemberMutex.RLock()
	defer fake.newAccountMemberMutex.RUnlock()
	argsForCall := fake.newAccountMemberArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAccountMemberCaller) NewAccountMemberReturns(result1 *pt.AccountMember, result2 *http.Response, result3 error) {
	fake.newAccountMemberMutex.Lock()
	defer fake.newAccountMemberMutex.Unlock()
	fake.NewAccountMemberStub = nil
	fake.newAccountMemberReturns = struct {
		result1 *pt.AccountMember
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAccountMemberCaller) NewAccountMemberReturnsOnCall(i int, result1 *pt.AccountMember, result2 *http.Response, result3 error) {
	fake.newAccountMemberMutex.Lock()
	defer fake.newAccountMemberMutex.Unlock()
	fake.NewAccountMemberStub = nil
	if fake.newAccountMemberReturnsOnCall == nil {
		fake.newAccountMemberReturnsOnCall = make(map[int]struct {
			result1 *pt.AccountMember
			result2 *http.Response
			result3 error
		})
	}
	fake.newAccountMemberReturnsOnCall[i] = struct {
		result1 *pt.AccountMember
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAccountMemberCaller) UpdateAccountMember(arg1 int, arg2 int, arg3 pt.AccountMemberRequest) (*pt.AccountMember, *http.Response, error) {
	fake.updateAccountMemberMutex.Lock()
	ret, specificReturn := fake.updateAccountMemberReturnsOnCall[len(fake.updateAccountMemberArgsForCall)]
	fake.updateAccountMemberArgsForCall = append(fake.updateAccountMemberArgsForCall, struct {
		arg1 int
		arg2 int
		arg3 pt.AccountMemberRequest
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateAccountMember", []interface{}{arg1, arg2, arg3})
	fake.updateAccountMemberMutex.Unlock()
	if fake.UpdateAccountMemberStub != nil {
		return fake.UpdateAccountMemberStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.updateAccountMemberReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAccountMemberCaller) UpdateAccountMemberCallCount() int {
	fake.updateAccountMemberMutex.RLock()
	defer fake.updateAccountMemberMutex.RUnlock()
	return len(fake.updateAccountMemberArgsForCall)
}

func (fake *FakeAccountMemberCaller) UpdateAccountMemberCalls(stub func(int, int, pt.AccountMemberRequest) (*pt.AccountMember, *http.Response, error)) {
	fake.updateAccountMemberMutex.Lock()
	defer fake.updateAccountMemberMutex.Unlock()
	fake.UpdateAccountMemberStub = stub
}

func (fake *FakeAccountMemberCaller) UpdateAccountMemberArgsForCall(i int) (int, int, pt.AccountMemberRequest) {
	fake.updateAccountMemberMutex.RLock()
	defer fake.updateAccountMemberMutex.RUnlock()
	argsForCall := fake.updateAccountMemberArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAccountMemberCaller) UpdateAccountMemberReturns(result1 *pt.AccountMember, result2 *http.Response, result3 error) {
	fake.updateAccountMemberMutex.Lock()
	defer fake.updateAccountMemberMutex.Unlock()
	fake.UpdateAccountMemberStub = nil
	fake.updateAccountMemberReturns = struct {
		result1 *pt.AccountMember
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAccountMemberCaller) UpdateAccountMemberReturnsOnCall(i int, result1 *pt.AccountMember, result2 *http.Response, result3 error) {
	fake.updateAccountMemberMutex.Lock()
	defer fake.updateAccountMemberMutex.Unlock()
	fake.UpdateAccountMemberStub = nil
	if fake.updateAccountMemberReturnsOnCall == nil {
		fake.updateAccountMemberReturnsOnCall = make(map[int]struct {
			result1 *pt.AccountMember
			result2 *http.Response
			result3 error
		})
	}
	fake.updateAccountMemberReturnsOnCall[i] = struct {
		result1 *pt.AccountMember
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAccountMemberCaller) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteAccountMemberMutex.RLock()
	defer fake.deleteAccountMemberMutex.RUnlock()
	fake.getAccountMemberMutex.RLock()
	defer fake.getAccountMemberMutex.RUnlock()
	fake.listAccountMembersMutex.RLock()
	defer fake.listAccountMembersMutex.RUnlock()
	fake.newAccountMemberMutex.RLock()
	defer fake.newAccountMemberMutex.RUnlock()
	fake.updateAccountMemberMutex.RLock()
	defer fake.updateAccountMemberMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAccountMemberCaller) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pt.AccountMemberCaller = new(FakeAccountMemberCaller)
