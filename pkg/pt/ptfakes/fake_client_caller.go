// Code generated by counterfeiter. DO NOT EDIT.
package ptfakes

import (
	"net/http"
	"sync"

	"github.com/xchapter7x/terraform-provider-pivotaltracker/pkg/pt"
)

type FakeClientCaller struct {
	DeleteProjectStub        func(int) (*http.Response, error)
	deleteProjectMutex       sync.RWMutex
	deleteProjectArgsForCall []struct {
		arg1 int
	}
	deleteProjectReturns struct {
		result1 *http.Response
		result2 error
	}
	deleteProjectReturnsOnCall map[int]struct {
		result1 *http.Response
		result2 error
	}
	GetProjectStub        func(int) (*pt.Project, *http.Response, error)
	getProjectMutex       sync.RWMutex
	getProjectArgsForCall []struct {
		arg1 int
	}
	getProjectReturns struct {
		result1 *pt.Project
		result2 *http.Response
		result3 error
	}
	getProjectReturnsOnCall map[int]struct {
		result1 *pt.Project
		result2 *http.Response
		result3 error
	}
	ListProjectsStub        func() ([]*pt.Project, *http.Response, error)
	listProjectsMutex       sync.RWMutex
	listProjectsArgsForCall []struct {
	}
	listProjectsReturns struct {
		result1 []*pt.Project
		result2 *http.Response
		result3 error
	}
	listProjectsReturnsOnCall map[int]struct {
		result1 []*pt.Project
		result2 *http.Response
		result3 error
	}
	NewProjectStub        func(pt.ProjectsRequest) (*pt.Project, *http.Response, error)
	newProjectMutex       sync.RWMutex
	newProjectArgsForCall []struct {
		arg1 pt.ProjectsRequest
	}
	newProjectReturns struct {
		result1 *pt.Project
		result2 *http.Response
		result3 error
	}
	newProjectReturnsOnCall map[int]struct {
		result1 *pt.Project
		result2 *http.Response
		result3 error
	}
	UpdateProjectStub        func(int, pt.ProjectRequest) (*pt.Project, *http.Response, error)
	updateProjectMutex       sync.RWMutex
	updateProjectArgsForCall []struct {
		arg1 int
		arg2 pt.ProjectRequest
	}
	updateProjectReturns struct {
		result1 *pt.Project
		result2 *http.Response
		result3 error
	}
	updateProjectReturnsOnCall map[int]struct {
		result1 *pt.Project
		result2 *http.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClientCaller) DeleteProject(arg1 int) (*http.Response, error) {
	fake.deleteProjectMutex.Lock()
	ret, specificReturn := fake.deleteProjectReturnsOnCall[len(fake.deleteProjectArgsForCall)]
	fake.deleteProjectArgsForCall = append(fake.deleteProjectArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("DeleteProject", []interface{}{arg1})
	fake.deleteProjectMutex.Unlock()
	if fake.DeleteProjectStub != nil {
		return fake.DeleteProjectStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteProjectReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClientCaller) DeleteProjectCallCount() int {
	fake.deleteProjectMutex.RLock()
	defer fake.deleteProjectMutex.RUnlock()
	return len(fake.deleteProjectArgsForCall)
}

func (fake *FakeClientCaller) DeleteProjectCalls(stub func(int) (*http.Response, error)) {
	fake.deleteProjectMutex.Lock()
	defer fake.deleteProjectMutex.Unlock()
	fake.DeleteProjectStub = stub
}

func (fake *FakeClientCaller) DeleteProjectArgsForCall(i int) int {
	fake.deleteProjectMutex.RLock()
	defer fake.deleteProjectMutex.RUnlock()
	argsForCall := fake.deleteProjectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClientCaller) DeleteProjectReturns(result1 *http.Response, result2 error) {
	fake.deleteProjectMutex.Lock()
	defer fake.deleteProjectMutex.Unlock()
	fake.DeleteProjectStub = nil
	fake.deleteProjectReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeClientCaller) DeleteProjectReturnsOnCall(i int, result1 *http.Response, result2 error) {
	fake.deleteProjectMutex.Lock()
	defer fake.deleteProjectMutex.Unlock()
	fake.DeleteProjectStub = nil
	if fake.deleteProjectReturnsOnCall == nil {
		fake.deleteProjectReturnsOnCall = make(map[int]struct {
			result1 *http.Response
			result2 error
		})
	}
	fake.deleteProjectReturnsOnCall[i] = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeClientCaller) GetProject(arg1 int) (*pt.Project, *http.Response, error) {
	fake.getProjectMutex.Lock()
	ret, specificReturn := fake.getProjectReturnsOnCall[len(fake.getProjectArgsForCall)]
	fake.getProjectArgsForCall = append(fake.getProjectArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("GetProject", []interface{}{arg1})
	fake.getProjectMutex.Unlock()
	if fake.GetProjectStub != nil {
		return fake.GetProjectStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getProjectReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeClientCaller) GetProjectCallCount() int {
	fake.getProjectMutex.RLock()
	defer fake.getProjectMutex.RUnlock()
	return len(fake.getProjectArgsForCall)
}

func (fake *FakeClientCaller) GetProjectCalls(stub func(int) (*pt.Project, *http.Response, error)) {
	fake.getProjectMutex.Lock()
	defer fake.getProjectMutex.Unlock()
	fake.GetProjectStub = stub
}

func (fake *FakeClientCaller) GetProjectArgsForCall(i int) int {
	fake.getProjectMutex.RLock()
	defer fake.getProjectMutex.RUnlock()
	argsForCall := fake.getProjectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClientCaller) GetProjectReturns(result1 *pt.Project, result2 *http.Response, result3 error) {
	fake.getProjectMutex.Lock()
	defer fake.getProjectMutex.Unlock()
	fake.GetProjectStub = nil
	fake.getProjectReturns = struct {
		result1 *pt.Project
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClientCaller) GetProjectReturnsOnCall(i int, result1 *pt.Project, result2 *http.Response, result3 error) {
	fake.getProjectMutex.Lock()
	defer fake.getProjectMutex.Unlock()
	fake.GetProjectStub = nil
	if fake.getProjectReturnsOnCall == nil {
		fake.getProjectReturnsOnCall = make(map[int]struct {
			result1 *pt.Project
			result2 *http.Response
			result3 error
		})
	}
	fake.getProjectReturnsOnCall[i] = struct {
		result1 *pt.Project
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClientCaller) ListProjects() ([]*pt.Project, *http.Response, error) {
	fake.listProjectsMutex.Lock()
	ret, specificReturn := fake.listProjectsReturnsOnCall[len(fake.listProjectsArgsForCall)]
	fake.listProjectsArgsForCall = append(fake.listProjectsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListProjects", []interface{}{})
	fake.listProjectsMutex.Unlock()
	if fake.ListProjectsStub != nil {
		return fake.ListProjectsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.listProjectsReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeClientCaller) ListProjectsCallCount() int {
	fake.listProjectsMutex.RLock()
	defer fake.listProjectsMutex.RUnlock()
	return len(fake.listProjectsArgsForCall)
}

func (fake *FakeClientCaller) ListProjectsCalls(stub func() ([]*pt.Project, *http.Response, error)) {
	fake.listProjectsMutex.Lock()
	defer fake.listProjectsMutex.Unlock()
	fake.ListProjectsStub = stub
}

func (fake *FakeClientCaller) ListProjectsReturns(result1 []*pt.Project, result2 *http.Response, result3 error) {
	fake.listProjectsMutex.Lock()
	defer fake.listProjectsMutex.Unlock()
	fake.ListProjectsStub = nil
	fake.listProjectsReturns = struct {
		result1 []*pt.Project
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClientCaller) ListProjectsReturnsOnCall(i int, result1 []*pt.Project, result2 *http.Response, result3 error) {
	fake.listProjectsMutex.Lock()
	defer fake.listProjectsMutex.Unlock()
	fake.ListProjectsStub = nil
	if fake.listProjectsReturnsOnCall == nil {
		fake.listProjectsReturnsOnCall = make(map[int]struct {
			result1 []*pt.Project
			result2 *http.Response
			result3 error
		})
	}
	fake.listProjectsReturnsOnCall[i] = struct {
		result1 []*pt.Project
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClientCaller) NewProject(arg1 pt.ProjectsRequest) (*pt.Project, *http.Response, error) {
	fake.newProjectMutex.Lock()
	ret, specificReturn := fake.newProjectReturnsOnCall[len(fake.newProjectArgsForCall)]
	fake.newProjectArgsForCall = append(fake.newProjectArgsForCall, struct {
		arg1 pt.ProjectsRequest
	}{arg1})
	fake.recordInvocation("NewProject", []interface{}{arg1})
	fake.newProjectMutex.Unlock()
	if fake.NewProjectStub != nil {
		return fake.NewProjectStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.newProjectReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeClientCaller) NewProjectCallCount() int {
	fake.newProjectMutex.RLock()
	defer fake.newProjectMutex.RUnlock()
	return len(fake.newProjectArgsForCall)
}

func (fake *FakeClientCaller) NewProjectCalls(stub func(pt.ProjectsRequest) (*pt.Project, *http.Response, error)) {
	fake.newProjectMutex.Lock()
	defer fake.newProjectMutex.Unlock()
	fake.NewProjectStub = stub
}

func (fake *FakeClientCaller) NewProjectArgsForCall(i int) pt.ProjectsRequest {
	fake.newProjectMutex.RLock()
	defer fake.newProjectMutex.RUnlock()
	argsForCall := fake.newProjectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClientCaller) NewProjectReturns(result1 *pt.Project, result2 *http.Response, result3 error) {
	fake.newProjectMutex.Lock()
	defer fake.newProjectMutex.Unlock()
	fake.NewProjectStub = nil
	fake.newProjectReturns = struct {
		result1 *pt.Project
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClientCaller) NewProjectReturnsOnCall(i int, result1 *pt.Project, result2 *http.Response, result3 error) {
	fake.newProjectMutex.Lock()
	defer fake.newProjectMutex.Unlock()
	fake.NewProjectStub = nil
	if fake.newProjectReturnsOnCall == nil {
		fake.newProjectReturnsOnCall = make(map[int]struct {
			result1 *pt.Project
			result2 *http.Response
			result3 error
		})
	}
	fake.newProjectReturnsOnCall[i] = struct {
		result1 *pt.Project
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClientCaller) UpdateProject(arg1 int, arg2 pt.ProjectRequest) (*pt.Project, *http.Response, error) {
	fake.updateProjectMutex.Lock()
	ret, specificReturn := fake.updateProjectReturnsOnCall[len(fake.updateProjectArgsForCall)]
	fake.updateProjectArgsForCall = append(fake.updateProjectArgsForCall, struct {
		arg1 int
		arg2 pt.ProjectRequest
	}{arg1, arg2})
	fake.recordInvocation("UpdateProject", []interface{}{arg1, arg2})
	fake.updateProjectMutex.Unlock()
	if fake.UpdateProjectStub != nil {
		return fake.UpdateProjectStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.updateProjectReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeClientCaller) UpdateProjectCallCount() int {
	fake.updateProjectMutex.RLock()
	defer fake.updateProjectMutex.RUnlock()
	return len(fake.updateProjectArgsForCall)
}

func (fake *FakeClientCaller) UpdateProjectCalls(stub func(int, pt.ProjectRequest) (*pt.Project, *http.Response, error)) {
	fake.updateProjectMutex.Lock()
	defer fake.updateProjectMutex.Unlock()
	fake.UpdateProjectStub = stub
}

func (fake *FakeClientCaller) UpdateProjectArgsForCall(i int) (int, pt.ProjectRequest) {
	fake.updateProjectMutex.RLock()
	defer fake.updateProjectMutex.RUnlock()
	argsForCall := fake.updateProjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClientCaller) UpdateProjectReturns(result1 *pt.Project, result2 *http.Response, result3 error) {
	fake.updateProjectMutex.Lock()
	defer fake.updateProjectMutex.Unlock()
	fake.UpdateProjectStub = nil
	fake.updateProjectReturns = struct {
		result1 *pt.Project
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClientCaller) UpdateProjectReturnsOnCall(i int, result1 *pt.Project, result2 *http.Response, result3 error) {
	fake.updateProjectMutex.Lock()
	defer fake.updateProjectMutex.Unlock()
	fake.UpdateProjectStub = nil
	if fake.updateProjectReturnsOnCall == nil {
		fake.updateProjectReturnsOnCall = make(map[int]struct {
			result1 *pt.Project
			result2 *http.Response
			result3 error
		})
	}
	fake.updateProjectReturnsOnCall[i] = struct {
		result1 *pt.Project
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClientCaller) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteProjectMutex.RLock()
	defer fake.deleteProjectMutex.RUnlock()
	fake.getProjectMutex.RLock()
	defer fake.getProjectMutex.RUnlock()
	fake.listProjectsMutex.RLock()
	defer fake.listProjectsMutex.RUnlock()
	fake.newProjectMutex.RLock()
	defer fake.newProjectMutex.RUnlock()
	fake.updateProjectMutex.RLock()
	defer fake.updateProjectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClientCaller) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pt.ClientCaller = new(FakeClientCaller)
